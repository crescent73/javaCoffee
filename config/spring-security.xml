<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">


<!--    <http pattern="index.html" security="none"/>-->
    <!-- 定义页面拦截规则  use-expressions: 是否启用SPEL表达式 默认是true-->
    <http use-expressions="false">
        <!-- 当前用户必须有ROLE_USER的角色 才可以访问根目录及所属子目录的资源 -->
<!--        <intercept-url pattern="/page/**" access="ROLE_ADMIN"/>-->

<!--        <form-login login-page="/index.html"-->
<!--                    login-processing-url="/login"-->
<!--                    default-target-url="/page/course/course.html"-->
<!--                    authentication-failure-url="/page/admin/home.html" always-use-default-target="false"-->
<!--                    username-parameter="name"-->
<!--                    password-parameter="password"-->
<!--        />-->
<!--        &lt;!&ndash; 关闭csrf &ndash;&gt;-->
<!--        <csrf disabled="true"/>-->
<!--        <logout logout-url="/logout" logout-success-url="/index.html" />-->
<!--        <headers>-->
<!--            <frame-options policy="SAMEORIGIN"/>-->
<!--        </headers>-->
<!--        <intercept-url pattern="/page/**" access="ROLE_USER" />-->
<!--        <custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />-->
    </http>

    <authentication-manager>
        <authentication-provider ref="myAuthenticationProvider" />
<!--            <user-service>-->
<!--                <user name="bob" password="123" authorities="ROLE_USER"></user>-->
<!--            </user-service>-->
<!--        </authentication-provider>-->

<!--        <authentication-provider user-service-ref="userDetailsService" />-->
    </authentication-manager>

    <beans:bean id="userDetailsService" class="com.coffee.config.MyUserDetailServce"/>
    <beans:bean id="myAuthenticationProvider" class="com.coffee.config.MyAuthenticationProvider">
        <beans:property name="userDetailsService">
            <beans:bean class="com.coffee.config.MyUserDetailServce">
            </beans:bean>
        </beans:property>
    </beans:bean>
    <!-- 认证过滤器 -->
    <beans:bean id="filterSecurityInterceptor"
            class="com.coffee.config.MyFilterSecurityInterceptor">
        <beans:property name="rejectPublicInvocations" value="true"/>
        <!-- 用户拥有的权限 -->
        <beans:property name="accessDecisionManager" ref="accessDecisionManager" />
        <!-- 用户是否拥有所请求资源的权限 -->
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <!-- 资源与权限对应关系 -->
        <beans:property name="securityMetadataSource" ref="securityMetadataSource" />
    </beans:bean>

    <!-- 2、更改验证信息加载方式 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider
                user-service-ref="mUserDetailsService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
        </authentication-provider>
    </authentication-manager>

    <!-- 1、配置自定义类MUserDetailsService -->
    <beans:bean id="mUserDetailsService" class="com.coffee.config.UserService" />

    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="accessDecisionManager" class="com.coffee.config.MyAccessDecisionManager"></beans:bean>

    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="securityMetadataSource" class="com.coffee.config.MFilterInvocationSecurityMetadataSource" ></beans:bean>
</beans:beans>